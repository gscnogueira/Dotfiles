#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.dotfiles/.files/.emacs.d/init.el

* Appearence
** Making emacs clean

#+begin_src elisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
 #+end_src

** Theme

#+begin_src elisp

  (load-theme 'modus-vivendi t)
  (setq modus-themes-italic-constructs t)
  (setq modus-themes-bold-constructs t)
  (setq modus-themes-paren-match '(underline intense))
  (setq modus-themes-syntax '(alt-syntax))

#+end_src

** Fonts

#+begin_src elisp
  (defun gscn/set-font-faces()
    (set-face-attribute 'default nil
                        :font "JetBrains Mono"
                        :height 118
                        :weight 'normal ))
  (gscn/set-font-faces)
#+end_src

** Icons

#+begin_src elisp
  (use-package all-the-icons)
#+end_src

** Modeline
*** Doom Modeline

#+begin_src elisp
  (use-package doom-modeline
    :after all-the-icons
    :init
    (doom-modeline-mode 1))
#+end_src

*** General Configuration

#+begin_src elisp
   (column-number-mode)                 ;; show column number in the mode-line
#+end_src

** Line Numbers

#+begin_src elisp

  (global-display-line-numbers-mode t) ;; enable line numbers

  (dolist (mode '(
                  org-agenda-mode-hook
                  org-mode-hook
                  Man-mode-hook
                  Man-mode-hook
                  calendar-mode-hook
                  dired-mode-hook
                  doc-view-mode-hook
                  elfeed-search-mode-hook
                  elfeed-show-mode-hook
                  eshell-mode-hook
                  helpful-mode-hook
                  inferior-haskell-mode
                  inferior-octave-mode-hook
                  mu4e-main-mode-hook
                  shell-mode-hook
                  term-mode-hook
                  tetris-mode-hook
                  vterm-mode-hook
                  ))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

* Packages
** Package System Setup

#+begin_src elisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

** Use-Package

Checking if ~use-package~ is already installed:

#+begin_src elisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

#+begin_src elisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

- OBS: The ~:ensure~ keyword causes the package(s) to be installed automatically if not already present on your system.
  
** Undo-tree

#+begin_src elisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1))
#+end_src

** Evil

#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil) ;; necessary to use evil collection
    (evil-mode 1)
    :config
    (evil-set-undo-system 'undo-tree)
    )

#+end_src

Evil collection: This is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as help-mode, M-x calendar, Eshell and more.

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Ivy

#+begin_src elisp
  (use-package ivy
    :init (ivy-mode 1)
    :bind (
           :map ivy-minibuffer-map
           ("C-k" . ivy-previous-line)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-d" . ivy-switch-buffer-kill)
           ("C-k" . ivy-previous-line)
    ))
#+end_src

#+begin_src elisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

** Counsel

#+begin_src elisp
  (use-package counsel
    :bind (
           ("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           ("C-x C-r" . counsel-buffer-or-recentf)
           ("C-M-j" . counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history))
    :config
    (recentf-mode 1)) 
#+end_src

** Org

#+begin_src elisp
  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . visual-line-mode))
    :config
    (setq org-ellipsis " ▾"
          org-startup-folded t
          org-directory "~/Notes"
          org-hide-emphasis-markers t
          org-startup-with-inline-images t
          org-src-window-setup 'current-window
          org-log-done 'time)
    :bind
    (("C-c a" . org-agenda-list)
     ("C-c t" . org-todo-list)
     :map org-mode-map
     ("C-c SPC" . counsel-outline)
     ))

#+end_src
*** Icons

#+begin_src elisp
  (setq prettify-symbols-alist '(("[ ]" . "")
                                 ("[X]" . "")
                                 ))
#+end_src

*** Agenda 
**** Agenda Files

#+begin_src elisp
    (setq-default org-agenda-files
                  '("~/Notes/20210807112735-tasks.org"
                    "~/Notes/20221025142716-engenharia_de_software_es.org"
                    "~/Notes/20221025142726-programacao_concorrente_pc.org"
                    "~/Notes/20221025142734-programacao_funcional_pf.org"
                    "~/Notes/20221025142743-automatos_e_computabilidade_ac.org"
                    "~/Notes/20220127092030-knedle.org"
                    "~/Notes/20221025142750-computacao_experimental_ce.org"
                    "~/Notes/20221025142758-informatica_e_sociedade_is.org"
                    "~/Notes/20210904224143-aniversarios.org"))
#+end_src

*** Bullets

#+begin_src elisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "✸")))
#+end_src

*** Babel

#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (R . t)
                               (C . t)
                               (python . t)
                               (shell . t)
                               (ruby . t)
                               (sql . t)
                               (js     . t)
                               (haskell . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Structure Templates

 #+begin_src elisp
   (require 'org-tempo)
 #+end_src
 
 #+begin_src elisp
   (setq org-structure-template-alist
         (append org-structure-template-alist '(("sh" . "src shell")
                                                ("el" . "src elisp")
                                                ("hs" . "src haskell")
                                                ("py" . "src python"))))
 #+end_src

*** Auto-tangle Configuration Files

Add the files that must be tangled to the ~org-tangle-files~ list

#+begin_src elisp
  (setq org-tangle-files '("~/.dotfiles/.*\.org$"
                           "~/.xmonad/.*\.org$"))
#+end_src

#+begin_src elisp
  (defun gscn/org-babel-tangle-config ()
    (when
        (let ((files (mapcar #'expand-file-name org-tangle-files)))
          (cl-some (lambda (x) (string-match-p x (buffer-file-name)))
                   files))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'gscn/org-babel-tangle-config)))
#+end_src

*** Org Roam

#+begin_src elisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c f" . org-roam-node-find)
           ("C-c i" . org-roam-node-insert)
           )
    :config
    (org-roam-setup)
    )
#+end_src

*** General Config
Open links in same frame
#+begin_src elisp
  (add-to-list 'org-link-frame-setup '(file . find-file))
#+end_src

** Languages
*** Haskell

#+begin_src elisp
  (use-package haskell-mode)
#+end_src

*** Scala

#+begin_src elisp
  (use-package scala-mode
    :interpreter
      ("scala" . scala-mode))
#+end_src

** VTERM

#+begin_src elisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    (evil-set-initial-state 'vterm-mode 'emacs))
#+end_src  

*** Toggle

#+begin_src elisp
  (use-package vterm-toggle
    :bind (("C-;" . vterm-toggle))
    :config
    (setq vterm-toggle-hide-method 'reset-window-configration)
    (setq vterm-toggle-reset-window-configration-after-exit t)
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-same-window)))
    )
#+end_src

** AUCTeX

#+begin_src elisp
  (use-package auctex)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
#+end_src

** Org Reveal

#+begin_src elisp
  (use-package ox-reveal)
#+end_src
** Magit
** Rainbow Delimiters

#+begin_src elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* File Mannagement
** Backup Files

#+begin_src elisp
  (setq make-backup-files nil) 
#+end_src

** Dired

#+begin_src elisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom
    ((dired-listing-switches "-gho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

* Window Mannagement
** Winner-mode

#+begin_src elisp
  (winner-mode)
#+end_src

* Key bindings

#+begin_src elisp
  (global-unset-key (kbd "C-x ["))
  (global-unset-key (kbd "C-x ]"))
  (global-unset-key (kbd "C-x C-b"))

  (global-set-key (kbd "C-x [") 'previous-buffer)
  (global-set-key (kbd "C-x ]") 'next-buffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* Daemon

#+begin_src elisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda(frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (gscn/set-font-faces))))
    (gscn/set-font-faces)) 
#+end_src

* My Extensions
** Config Editor

Config files list:
#+begin_src elisp
  (setq config-file-alist '(
                            ("Emacs"  . "~/.dotfiles/Emacs.org")
                            ("Rofi"  . "~/.config/rofi/config.rasi")
                            ("Xmonad" . "~/.xmonad/README.org")
                            ("Nvim"  . "~/.dotfiles/Nvim.org)")
                            ("Zsh"  . "~/.dotfiles/Zsh.org")
                            ))
#+end_src

#+begin_src elisp
  (defun gscn/edit_config()
    (interactive)
    (find-file (expand-file-name (cdr (assoc (ivy-read "Config:" config-file-alist) config-file-alist))))
    )
#+end_src

#+begin_src elisp
  (global-set-key (kbd "C-c c") 'gscn/edit_config)
#+end_src
